name: "Setup PowerShell Toolkit"
author: "hugoalh Studio"
description: "Setup PowerShell Gallery, PowerShellGet, and PowerShell module `hugoalh.GitHubActionsToolkit`."
inputs:
  toolkit_setup:
    description: "{Boolean} Whether to setup PowerShell module `hugoalh.GitHubActionsToolkit`."
    required: false
    default: "True"
  toolkit_version:
    description: "{SemVer} PowerShell module `hugoalh.GitHubActionsToolkit` target version."
    required: false
    default: "1.4.1"
  toolkit_allowprerelease:
    description: "{Boolean} Whether to allow PowerShell module `hugoalh.GitHubActionsToolkit` target pre release version."
    required: false
    default: "False"
runs:
  using: "composite"
  steps:
    - name: "Check Input `toolkit_setup`"
      if: "${{inputs.toolkit_setup != 'False' && inputs.toolkit_setup != 'True'}}"
      run: |
        Write-Host -Object '::error::TypeError: Input `toolkit_setup` must be type of boolean!'
        Exit 1
      shell: "pwsh"
    - name: "Check Input `toolkit_version`"
      run: |
        Try {
          $Null = [SemVer]::Parse('${{inputs.toolkit_version}}')
        }
        Catch {
          Write-Host -Object '::error::TypeError: Input `toolkit_version` must be type of SemVer!'
          Exit 1
        }
      shell: "pwsh"
    - name: "Check Input `toolkit_allowprerelease`"
      if: "${{inputs.toolkit_allowprerelease != 'False' && inputs.toolkit_allowprerelease != 'True'}}"
      run: |
        Write-Host -Object '::error::TypeError: Input `toolkit_allowprerelease` must be type of boolean!'
        Exit 1
      shell: "pwsh"
    - name: "Check PowerShell"
      run: |
        #Requires -PSEdition Core -Version 7.2
        Exit 0
      shell: "pwsh"
    - name: "Setup PowerShell Gallery"
      run: |
        [Boolean]$IsDebugMode = $Env:RUNNER_DEBUG -ieq 1 -or $Env:RUNNER_DEBUG -ieq 'True'
        Try {
          $PSRepositoryPSGallery = Get-PSRepository -Name 'PSGallery'
        }
        Catch {
          Write-Host -Object '::error::PowerShell repository `PSGallery` does not exist!'
          Exit 1
        }
        If ($PSRepositoryPSGallery.InstallationPolicy -ine 'Trusted') {
          Set-PSRepository -Name 'PSGallery' -InstallationPolicy 'Trusted' -Verbose:$IsDebugMode
        }
      shell: "pwsh"
    - name: "Setup PowerShellGet"
      run: |
        [Boolean]$IsDebugMode = $Env:RUNNER_DEBUG -ieq 1 -or $Env:RUNNER_DEBUG -ieq 'True'
        [SemVer]$PowerShellGetMinimumVersion = [SemVer]::Parse('2.2.5')
        Try {
          $PSModulePowerShellGetMeta = Get-InstalledModule -Name 'PowerShellGet'
          If ($PSModulePowerShellGetMeta.Version -ilt $PowerShellGetMinimumVersion) {
            Throw
          }
        }
        Catch {
          Install-Module -Name 'PowerShellGet' -MinimumVersion $PowerShellGetMinimumVersion -Scope 'CurrentUser' -AcceptLicense -Confirm:$False -Verbose:$IsDebugMode
        }
      shell: "pwsh"
    - name: "Setup PowerShell Module `hugoalh.GitHubActionsToolkit`"
      if: "${{inputs.toolkit_setup == 'True'}}"
      run: |
        [Boolean]$IsDebugMode = $Env:RUNNER_DEBUG -ieq 1 -or $Env:RUNNER_DEBUG -ieq 'True'
        [SemVer]$PSToolkitVersion = [SemVer]::Parse('${{inputs.toolkit_version}}')
        [Boolean]$PSToolkitAllowPreRelease = [Boolean]::Parse('${{inputs.toolkit_allowprerelease}}')
        Try {
          $PSModuleToolkitMeta = Get-InstalledModule -Name 'hugoalh.GitHubActionsToolkit'
          If ($PSModuleToolkitMeta.Version -ine $PSToolkitVersion) {
            Throw
          }
        }
        Catch {
          Install-Module -Name 'hugoalh.GitHubActionsToolkit' -RequiredVersion $PSToolkitVersion -Scope 'CurrentUser' -AllowPrerelease:$PSToolkitAllowPreRelease -AcceptLicense -Confirm:$False -Verbose:$IsDebugMode
        }
      shell: "pwsh"
branding:
  icon: "package"
  color: "blue"
